/* Функции конструкторы */

'use strict';

/* Функция по своей сути является объектом и по идее в неё можно записать какие-то методы и свойства. */

/* Новый номер */
const num = new Number(3);
console.log(num);

/* Новая функция */
const func = new Function(3);
console.log(func);

/* Если такая функция будет содержать методы и свойства, то она, в итоге, создаст новый объект. */

/* Два аргумента name , id */
/* Для каждого отдельного пользователя мы указываем своё имя и свой id */
function User(name, id) {
    this.name = name;
    this.id = id;
    this.human = true;
    /* Можем использовать методы */
    this.hello = function() {
        console.log(`Привет ${this.name}`);
    };
}
/* После того, как использовали такой синтаксис, наша функция стала конструктором. С её помощью можем создавать новых пользователей  */

/* При помощи prototype мы можем добавлять новые методы и свойства в наш конструктор и они будут прототипно наследоваться у потомков. Этот приём используется когда у нас нет доступа к нашему прототипу, но его нужно модифицировать */
User.prototype.exit = function() {
    console.log(`Пользователь ${this.name} ушёл`);
};


/* Внутри этой переменной будет находится не функция, а объект */
const ivan = new User('Иван', 28);
const alex = new User('Алекс', 20);

ivan.exit();

ivan.hello();
alex.hello();

console.log(ivan, alex);

/* Конструкторы нам нужны для создания новых однотипных объектов. (новые пользователи сайта, товары в магазине, ролики на ютубе) (везде, где есть шаблонизация) */

/* Мы разобрали стандарт ES5! */

/* В ES6 стандарте появились класы - это синтаксический сахар, т.е. красивая обёртка всего функционала, который существует внутри. */

/* В JS изначально классов не было, они появились в качестве синтаксического сахара */

/* Классы */
class UserClass {
    constructor(name, id) {
        this.name = name;
        this.id = id;
        this.human = true;
    }
    hello() {
        console.log(`Привет ${this.name}`);
    }
    exit() {
        console.log(`Пользователь ${this.name} ушёл`);
    }
}